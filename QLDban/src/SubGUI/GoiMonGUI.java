/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package SubGUI;


import java.util.Vector;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import model.MonAn;
import services.ChonBanService;
import services.GoiMonService;
import services.MenuService;


public class GoiMonGUI extends javax.swing.JFrame {
    private final String BanDangChon;
    private final MenuService menuService = new MenuService();
    private final ChonBanService chonBanService = new ChonBanService();
    private final GoiMonService goiMonService = new GoiMonService();
    private javax.swing.table.DefaultTableModel dtmDSThucDon;
    private Vector<MonAn> dsMonAnTrongMenu = new Vector<>();
    /**
     * Creates new form GoiMonGUI
     * @param BanDangChon
     * @param pnStatusBanAn
     */
    public GoiMonGUI(String BanDangChon , JPanel pnStatusBanAn) {
        initComponents();
        this.BanDangChon = BanDangChon;
        // Khởi tạo DefaultTableModel cho bảng
        dtmDSThucDon = new javax.swing.table.DefaultTableModel(
            new Object[][]{}, // Dữ liệu ban đầu rỗng
            new String[]{"Mã Món", "Tên Món", "Đơn Giá"} // Tên cột
        );
        // Gán DefaultTableModel cho bảng
        DSThucDon.setModel(dtmDSThucDon);
        hienThiMenuNhaHang();
        
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setTitle("Gọi món");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Container = new javax.swing.JPanel();
        pnTimKiem = new javax.swing.JPanel();
        txtTimKiem = new javax.swing.JTextField();
        btnTimKiem = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        DSThucDon = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        txtSoLuong = new javax.swing.JTextField();
        btnThemMon = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Container.setPreferredSize(new java.awt.Dimension(550, 380));

        pnTimKiem.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtTimKiem.setText("Nhập tên món.");
        txtTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTimKiemActionPerformed(evt);
            }
        });

        btnTimKiem.setBackground(new java.awt.Color(102, 255, 204));
        btnTimKiem.setText("Tìm Kiếm");

        javax.swing.GroupLayout pnTimKiemLayout = new javax.swing.GroupLayout(pnTimKiem);
        pnTimKiem.setLayout(pnTimKiemLayout);
        pnTimKiemLayout.setHorizontalGroup(
            pnTimKiemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTimKiemLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnTimKiem)
                .addGap(45, 45, 45))
        );
        pnTimKiemLayout.setVerticalGroup(
            pnTimKiemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnTimKiemLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnTimKiemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTimKiem))
                .addContainerGap())
        );

        DSThucDon.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Mã Món", "Tên Món", "Đơn Giá"
            }
        ));
        jScrollPane1.setViewportView(DSThucDon);

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setPreferredSize(new java.awt.Dimension(550, 70));

        txtSoLuong.setText("1");
        txtSoLuong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSoLuongActionPerformed(evt);
            }
        });

        btnThemMon.setText("Thêm món");
        btnThemMon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemMonActionPerformed(evt);
            }
        });

        jLabel1.setText("Số Lượng:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(112, 112, 112)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnThemMon)
                .addContainerGap(57, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(8, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnThemMon)
                    .addComponent(jLabel1))
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout ContainerLayout = new javax.swing.GroupLayout(Container);
        Container.setLayout(ContainerLayout);
        ContainerLayout.setHorizontalGroup(
            ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ContainerLayout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(pnTimKiem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)))
        );
        ContainerLayout.setVerticalGroup(
            ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Container, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Container, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnThemMonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemMonActionPerformed
        int rowSelected = DSThucDon.getSelectedRow();
            if (rowSelected != -1) {
                MonAn monAn = new MonAn();
                monAn.setMaMonAn((int) dtmDSThucDon.getValueAt(rowSelected, 0));
                monAn.setTenMonAn((String) dtmDSThucDon.getValueAt(rowSelected, 1));
                monAn.setDonGia((Integer) dtmDSThucDon.getValueAt(rowSelected, 2));
                String strSoLuong = txtSoLuong.getText();
                if (strSoLuong != null && strSoLuong.trim().length() > 0 && strSoLuong.matches("^\\d+$")) {
                    int soLuong = Integer.parseInt(strSoLuong);
                    if (soLuong >= 1) {
                        goiMonService.themMonAn(BanDangChon, monAn, soLuong);
//                        hienThiThucDonBanAn(BanDangChon);
                        if (goiMonService.laySoLuongMonAn(BanDangChon) > 0) {
                            chonBanService.setStatusBan(BanDangChon, "busy");
                        } else {
                            chonBanService.setStatusBan(BanDangChon, "Empty");
                        }
                    } else {
                        JOptionPane.showMessageDialog(GoiMonGUI.this, "Số lượng ít nhất phải là 1",
                                "Warning", JOptionPane.WARNING_MESSAGE);
                    }
                } else if (strSoLuong != null && strSoLuong.trim().equals("")) {
                    JOptionPane.showMessageDialog(GoiMonGUI.this, "Số lượng không được để trống!");
                } else if (strSoLuong != null && strSoLuong.trim().length() > 0 && !strSoLuong.matches("^\\d+$")) {
                    JOptionPane.showMessageDialog(GoiMonGUI.this, "Số lượng nhập không đúng định dạng!",
                            "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(GoiMonGUI.this, "Vui lòng chọn món ăn cần thêm!");
            }
        
    }//GEN-LAST:event_btnThemMonActionPerformed

    private void txtSoLuongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSoLuongActionPerformed
        txtTimKiem.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                locThongTin();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                locThongTin();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                locThongTin();
            }
        });
        
    }//GEN-LAST:event_txtSoLuongActionPerformed

    private void txtTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTimKiemActionPerformed
        txtTimKiem.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                locThongTin();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                locThongTin();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                locThongTin();
            }
        });
    }//GEN-LAST:event_txtTimKiemActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Container;
    private javax.swing.JTable DSThucDon;
    private javax.swing.JButton btnThemMon;
    private javax.swing.JButton btnTimKiem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnTimKiem;
    private javax.swing.JTextField txtSoLuong;
    private javax.swing.JTextField txtTimKiem;
    // End of variables declaration//GEN-END:variables

    public void showWindow(JPanel parent) {
        setLocationRelativeTo(parent);
        this.setVisible(true);
    }
    
    private void hienThiMenuNhaHang(Vector<MonAn> dsMonAn) {
        dtmDSThucDon.setRowCount(0);
        for (MonAn monAn : dsMonAn) {
            Vector<Object> vec = new Vector<>();
            vec.add(monAn.getMaMonAn());
            vec.add(monAn.getTenMonAn());
            vec.add(monAn.getDonGia());
            dtmDSThucDon.addRow(vec);
        }
    }
    
    private void hienThiMenuNhaHang() {
        dtmDSThucDon.setRowCount(0);
        dsMonAnTrongMenu = menuService.layDanhSachMenu();
        for (MonAn monAn : dsMonAnTrongMenu) {
            Vector<Object> vec = new Vector<>();
            vec.add(monAn.getMaMonAn());
            vec.add(monAn.getTenMonAn());
            vec.add(monAn.getDonGia());
            dtmDSThucDon.addRow(vec);
        }
    }
    
    private void docDuLieu() {
        dsMonAnTrongMenu = menuService.layDanhSachMenu();
    }

    public void locThongTin() {
        docDuLieu();
        String duLieuLoc = txtTimKiem.getText();
        Vector<MonAn> dsMonAnDaLoc = new Vector<>();
        for (MonAn monAn : dsMonAnTrongMenu) {
            String maMonAnString = String.valueOf(monAn.getMaMonAn());
            if (maMonAnString.toUpperCase().contains(duLieuLoc.toUpperCase()) || monAn.getTenMonAn().toUpperCase().contains(duLieuLoc.toUpperCase())) {
                dsMonAnDaLoc.add(monAn);
            }
        }
        if (duLieuLoc.trim().length() > 0) {
            hienThiMenuNhaHang(dsMonAnDaLoc);
        } else {
            hienThiMenuNhaHang();
        }
    }
    
    
}
